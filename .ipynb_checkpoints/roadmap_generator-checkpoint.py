{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c3aa39d3-5cf8-4f2e-a476-1f80858cd3cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter your learning goal (e.g., 'Roadmap to become a Data Scientist'):  Create a 6-month learning roadmap to become a UI/UX Designer. Also, suggest 5 practical project ideas that the learner can implement to strengthen skills.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "--- Generated Roadmap ---\n",
      "\n",
      "## 6-Month UI/UX Design Learning Roadmap\n",
      "This roadmap focuses on practical application and portfolio building.  It assumes a dedicated learning schedule of approximately 10-15 hours per week. Adjust the timeline based on your own pace and available time.\n",
      "  **Month 1: Foundations & Design Principles**\n",
      "  * **Week 1-2:** Introduction to UI/UX Design, User Research basics (user interviews, surveys, contextual inquiries), Design Thinking process, understanding user personas and journey maps.  Resources: Interaction Design Foundation (IxDF) courses, Nielsen Norman Group articles, YouTube channels like The Futur.\n",
      "  * **Week 3-4:**  Visual Design basics: color theory, typography, layout principles (grid systems, whitespace), visual hierarchy. Resources:  Skillshare, Udemy courses, Adobe Color, books on design principles.  Practice with exercises like recreating existing designs.\n",
      "  **Month 2: Wireframing & Prototyping**\n",
      "  * **Week 5-6:**  Wireframing techniques (low-fidelity, mid-fidelity), understanding information architecture and sitemaps. Tools: Figma, Balsamiq. Practice creating wireframes for various scenarios (e.g., e-commerce app, social media platform).\n",
      "  * **Week 7-8:** Prototyping using Figma or Adobe XD.  Learn to create interactive prototypes to simulate user flows and test usability.  Focus on creating prototypes that test key interactions and user journeys.\n",
      "  **Month 3: UI Design & Style Guides**\n",
      "  * **Week 9-10:**  UI Design principles, creating design systems and style guides, understanding UI components (buttons, forms, navigation).  Practice designing UI elements for different platforms (web, mobile).\n",
      "  * **Week 11-12:**  Advanced Figma/XD skills (components, variants, auto layout), working with design systems, creating a personal design system.\n",
      "  **Month 4: User Research & Testing**\n",
      "  * **Week 13-14:**  Conducting user interviews and usability testing, analyzing user feedback, iterative design process.  Learn how to create and use usability testing scripts. Consider using tools like Maze or UserTesting.\n",
      "  * **Week 15-16:**  A/B testing, data analysis related to design decisions,  learning from user feedback to improve designs.\n",
      "  **Month 5: Portfolio Building & Specialization**\n",
      "  * **Week 17-18:**  Crafting a strong portfolio showcasing your best projects.  Focus on highlighting the design process and the impact of your designs. Consider using platforms like Behance or Dribbble.\n",
      "  * **Week 19-20:**  Start focusing on a specific area of UI/UX design that interests you (e.g., mobile app design, web design, UX writing).  Refine your portfolio to match your chosen specialization.\n",
      "  **Month 6: Job Search & Continuous Learning**\n",
      "  * **Week 21-22:**  Network with other designers, attend online events and workshops, prepare for interviews (behavioral questions, portfolio presentation).\n",
      "  * **Week 23-24:**  Start applying for jobs, continue learning and expanding your skills, stay updated on industry trends.\n",
      "  **5 Practical Project Ideas:**\n",
      "1. **E-commerce App Redesign:** Choose an existing e-commerce app (like a clothing store or food delivery app) and redesign a key feature or the entire user flow, focusing on improving usability and user experience.\n",
      "2. **Fitness App UI Design:** Design the UI for a fitness tracking app, including screens for tracking workouts, progress, and setting goals.  Consider different user personas and their needs.\n",
      "3. **Landing Page Redesign:**  Select a poorly designed landing page and redesign it, focusing on improving conversion rates by optimizing user experience and visual appeal.\n",
      "4. **Social Media Feature Design:** Design a new feature for an existing social media platform (e.g., a new way to share content, a new messaging feature).\n",
      "5. **Non-profit Website Redesign:**  Redesign the website for a local non-profit organization. This allows you to practice applying your skills for a good cause and provides a real-world context.\n",
      "Remember to document your process for each project, including research, wireframes, prototypes, and user testing results.  This documentation will be crucial for building your portfolio and demonstrating your skills to potential employers.  Good luck!\n"
     ]
    }
   ],
   "source": [
    "# roadmap_generator.py\n",
    "import google.generativeai as genai\n",
    "import time\n",
    "\n",
    "# ⚡ Configure API key\n",
    "genai.configure(api_key=\"AIzaSyBDAluH00q61idrFJX50Tmh1csJ363g0Vc\")\n",
    "\n",
    "class RoadmapGenerationError(Exception):\n",
    "    pass\n",
    "\n",
    "def validate_prompt(prompt: str) -> bool:\n",
    "    if not prompt or not isinstance(prompt, str):\n",
    "        return False\n",
    "    return 50 <= len(prompt) <= 4000\n",
    "\n",
    "def generate_roadmap(prompt: str, max_retries: int = 3) -> str:\n",
    "    if not validate_prompt(prompt):\n",
    "        raise RoadmapGenerationError(\"Invalid prompt: must be 50-4000 chars.\")\n",
    "\n",
    "    retry_count = 0\n",
    "    last_error = None\n",
    "\n",
    "    while retry_count < max_retries:\n",
    "        try:\n",
    "            model = genai.GenerativeModel(\"gemini-1.5-flash\")\n",
    "            response = model.generate_content(prompt)\n",
    "            if not response or not response.text:\n",
    "                raise RoadmapGenerationError(\"Empty response from model\")\n",
    "            return response.text.strip()\n",
    "        except Exception as e:\n",
    "            last_error = str(e)\n",
    "            retry_count += 1\n",
    "            time.sleep(2 ** retry_count)\n",
    "            continue\n",
    "\n",
    "    raise RoadmapGenerationError(f\"Failed after {max_retries} attempts. Last error: {last_error}\")\n",
    "\n",
    "def present_roadmap(raw_text: str) -> str:\n",
    "    \"\"\"\n",
    "    Formats the raw roadmap text to make it more readable.\n",
    "    Adds spacing, headings, and bullet points where possible.\n",
    "    \"\"\"\n",
    "    lines = raw_text.split('\\n')\n",
    "    formatted_lines = []\n",
    "\n",
    "    for line in lines:\n",
    "        line = line.strip()\n",
    "        if not line:\n",
    "            continue\n",
    "        # Add spacing for headings\n",
    "        if line.lower().startswith((\"month\", \"goal\", \"focus\", \"resources\", \"note\")):\n",
    "            formatted_lines.append(\"\\n\" + line)\n",
    "        # Bullet points\n",
    "        elif line.startswith((\"-\", \"*\")):\n",
    "            formatted_lines.append(\"  \" + line)\n",
    "        else:\n",
    "            formatted_lines.append(line)\n",
    "\n",
    "    return \"\\n\".join(formatted_lines)\n",
    "\n",
    "# ✅ Example usage\n",
    "if __name__ == \"__main__\":\n",
    "    user_prompt = input(\"Enter your learning goal (e.g., 'Roadmap to become a Data Scientist'): \")\n",
    "    try:\n",
    "        raw_roadmap = generate_roadmap(user_prompt)\n",
    "        formatted_roadmap = present_roadmap(raw_roadmap)\n",
    "        print(\"\\n--- Generated Roadmap ---\\n\")\n",
    "        print(formatted_roadmap)\n",
    "    except RoadmapGenerationError as e:\n",
    "        print(f\"⚠️ Roadmap generation failed: {e}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b9bfbc44-307a-453c-a97f-c074c4b7ed01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
